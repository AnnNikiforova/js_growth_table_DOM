{"mappings":"ACEA,IAAM,EAAkB,SAAS,aAAa,CAAC,eACzC,EAAkB,SAAS,aAAa,CAAC,eACzC,EAAqB,SAAS,aAAa,CAAC,kBAC5C,EAAqB,SAAS,aAAa,CAAC,kBAC5C,EAAQ,SAAS,aAAa,CAAC,UAKrC,SAAS,IACP,IAAM,EAAW,EAAM,IAAI,CAAC,MAAM,CAC5B,EAAW,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,AAE3C,CAAA,EAAgB,QAAQ,CAAG,GAPZ,GAQf,EAAgB,QAAQ,CAAG,GAPZ,EASf,EAAmB,QAAQ,CAAG,GAVf,GAWf,EAAmB,QAAQ,CAAG,GAVf,CAWjB,CAEA,EAAgB,gBAAgB,CAAC,QAAS,WACxC,GAAI,EAAM,IAAI,CAAC,MAAM,CAfN,GAemB,CAIhC,IAAK,IAHC,EAAS,EAAM,SAAS,GACxB,EAAY,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAEnC,EAAI,EAAG,EAAI,EAAW,IAC7B,EAAO,UAAU,GAEnB,GACF,CACF,GAEA,EAAgB,gBAAgB,CAAC,QAAS,WACpC,EAAM,IAAI,CAAC,MAAM,CA1BN,IA2Bb,EAAM,SAAS,CAAC,IAChB,IAEJ,GAEA,EAAmB,gBAAgB,CAAC,QAAS,WAG3C,GAAI,AAFa,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CAlC5B,GAoCU,CAClB,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,E,C,M,E,CADX,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAGL,GACF,CACF,GAEA,EAAmB,gBAAgB,CAAC,QAAS,WAG3C,GAAI,AAFa,EAAM,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC,MAAM,CA5C5B,EA8CU,CAClB,IAAA,EAAA,CAAA,EAAA,EAAA,CAAA,EAAA,EAAA,KAAA,E,G,CAAL,IAAA,IAAK,EAAA,EAAa,EAAM,IAAI,CAAA,OAAA,QAAA,CAAA,GAAvB,CAAA,CAAA,EAAA,AAAA,CAAA,EAAA,EAAA,IAAA,EAAA,EAAA,IAAA,AAAA,EAAA,EAAL,CAAA,EACE,AADG,EAAA,KAAA,CACC,UAAU,CAAC,G,C,M,E,CADZ,EAAA,CAAA,EAAA,EAAA,C,Q,C,G,CAAA,GAAA,AAAA,MAAA,EAAA,MAAA,EAAA,EAAA,MAAA,E,Q,CAAA,GAAA,EAAA,MAAA,C,C,CAGL,GACF,CACF,GAEA","sources":["<anon>","src/scripts/main.js"],"sourcesContent":["\"use strict\";\nvar appendRowButton = document.querySelector(\".append-row\");\nvar removeRowButton = document.querySelector(\".remove-row\");\nvar appendColumnButton = document.querySelector(\".append-column\");\nvar removeColumnButton = document.querySelector(\".remove-column\");\nvar table = document.querySelector(\".field\");\nvar MAX_SIZE = 10;\nvar MIN_SIZE = 2;\nfunction updateButtons() {\n    var rowCount = table.rows.length;\n    var colCount = table.rows[0].cells.length;\n    appendRowButton.disabled = rowCount >= MAX_SIZE;\n    removeRowButton.disabled = rowCount <= MIN_SIZE;\n    appendColumnButton.disabled = colCount >= MAX_SIZE;\n    removeColumnButton.disabled = colCount <= MIN_SIZE;\n}\nappendRowButton.addEventListener(\"click\", function() {\n    if (table.rows.length < MAX_SIZE) {\n        var newRow = table.insertRow();\n        var cellCount = table.rows[0].cells.length;\n        for(var i = 0; i < cellCount; i++)newRow.insertCell();\n        updateButtons();\n    }\n});\nremoveRowButton.addEventListener(\"click\", function() {\n    if (table.rows.length > MIN_SIZE) {\n        table.deleteRow(-1);\n        updateButtons();\n    }\n});\nappendColumnButton.addEventListener(\"click\", function() {\n    var colCount = table.rows[0].cells.length;\n    if (colCount < MAX_SIZE) {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                row.insertCell();\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        updateButtons();\n    }\n});\nremoveColumnButton.addEventListener(\"click\", function() {\n    var colCount = table.rows[0].cells.length;\n    if (colCount > MIN_SIZE) {\n        var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n        try {\n            for(var _iterator = table.rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                var row = _step.value;\n                row.deleteCell(-1);\n            }\n        } catch (err) {\n            _didIteratorError = true;\n            _iteratorError = err;\n        } finally{\n            try {\n                if (!_iteratorNormalCompletion && _iterator.return != null) {\n                    _iterator.return();\n                }\n            } finally{\n                if (_didIteratorError) {\n                    throw _iteratorError;\n                }\n            }\n        }\n        updateButtons();\n    }\n});\nupdateButtons();\n\n//# sourceMappingURL=index.903093cf.js.map\n","'use strict';\n\nconst appendRowButton = document.querySelector('.append-row');\nconst removeRowButton = document.querySelector('.remove-row');\nconst appendColumnButton = document.querySelector('.append-column');\nconst removeColumnButton = document.querySelector('.remove-column');\nconst table = document.querySelector('.field');\n\nconst MAX_SIZE = 10;\nconst MIN_SIZE = 2;\n\nfunction updateButtons() {\n  const rowCount = table.rows.length;\n  const colCount = table.rows[0].cells.length;\n\n  appendRowButton.disabled = rowCount >= MAX_SIZE;\n  removeRowButton.disabled = rowCount <= MIN_SIZE;\n\n  appendColumnButton.disabled = colCount >= MAX_SIZE;\n  removeColumnButton.disabled = colCount <= MIN_SIZE;\n}\n\nappendRowButton.addEventListener('click', () => {\n  if (table.rows.length < MAX_SIZE) {\n    const newRow = table.insertRow();\n    const cellCount = table.rows[0].cells.length;\n\n    for (let i = 0; i < cellCount; i++) {\n      newRow.insertCell();\n    }\n    updateButtons();\n  }\n});\n\nremoveRowButton.addEventListener('click', () => {\n  if (table.rows.length > MIN_SIZE) {\n    table.deleteRow(-1);\n    updateButtons();\n  }\n});\n\nappendColumnButton.addEventListener('click', () => {\n  const colCount = table.rows[0].cells.length;\n\n  if (colCount < MAX_SIZE) {\n    for (const row of table.rows) {\n      row.insertCell();\n    }\n    updateButtons();\n  }\n});\n\nremoveColumnButton.addEventListener('click', () => {\n  const colCount = table.rows[0].cells.length;\n\n  if (colCount > MIN_SIZE) {\n    for (const row of table.rows) {\n      row.deleteCell(-1);\n    }\n    updateButtons();\n  }\n});\n\nupdateButtons();\n"],"names":["appendRowButton","document","querySelector","removeRowButton","appendColumnButton","removeColumnButton","table","updateButtons","rowCount","rows","length","colCount","cells","disabled","addEventListener","newRow","insertRow","cellCount","i","insertCell","deleteRow","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","row","value","err","return","deleteCell"],"version":3,"file":"index.903093cf.js.map"}